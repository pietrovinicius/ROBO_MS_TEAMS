import time
import pyautogui
import datetime
import tkinter as tk
from tkinter import messagebox
import threading
import base64


#"============================== inicio ========================"
def interface():
    root = tk.Tk()
    #root.maxsize(360,480)
    #root.minsize(360,480)
    root.geometry("600x360")
    root.title("Decodificador de senha IW")
    
    

    def decodificar():
        codigo = entrada.get()
        print(f"Codigo: {codigo}")
        dado_decodificado = base64.b64decode(codigo).decode("utf-8")
        print(f"Dado decodificado: {dado_decodificado}")
        
        # Exemplo de uso
        output_string = dividir_string(dado_decodificado)
        print(output_string)
        
        # Escrever resultado no log:
        escrever_no_log(output_string)
        print(f"Resultado: {output_string}\ngravado no arquivo log.txt")
                
        text_senha = tk.Text(root, height=3 , width=28)
        text_senha.insert("1.0" , f"Decodificado:\n{output_string}")
        text_senha.place(x=195 , y=260)
        
        
    def dividir_string(input_string):
        # Divide a string de entrada pelo caractere ":"
        partes = input_string.split(":")
        
        # Verifica se há pelo menos duas partes
        if len(partes) >= 2:
            # Junta a primeira parte (antes do ":") e a segunda parte (após o ":") com uma quebra de linha
            resultado = f"{partes[0]}\n{':'.join(partes[1:])}"
        else:
            # Se não houver partes suficientes, retorna a string de entrada original
            resultado = input_string
        
        return resultado      
        
        
    
    def fechar_app():
        global statusThread
        # Exiba uma caixa de diálogo de confirmação
        resultado = messagebox.askyesno("Confirmação", "Tem certeza de que deseja fechar o aplicativo?")
        if resultado:
            # Feche o aplicativo
            statusThread = False
            print(f"statusThread: {statusThread}\nthreadExecutar.start()\n")
            root.destroy()      
            
            
    def escrever_no_log(input_string):
        # Obtemos o tempo_marcacao atual
        tempo_marcacao = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Criamos ou anexamos ao arquivo de log
        with open("log.txt", "a") as f:
            # Escrevemos o tempo_marcacao e a string original
            f.write(f"{tempo_marcacao} - {input_string}\n")
           
            
            
            
            
            
            
    imagem = tk.PhotoImage(file="Base64_Reader.png" , height=100 , width=200)
    lb_barra_superior = tk.Label(root, image=imagem)
    lb_barra_superior.place(x=240 , y=5)
    
    lb_text_insira_senha = tk.Label(root , text="Insira o código abaixo:")
    lb_text_insira_senha.place(x=220 , y=135)
    
    entrada = tk.Entry(root, width=38)
    entrada.place(x=180 , y=175)
    
        
    bt_Iniciar = tk.Button(root, text="Descriptografar", width=18, command=lambda: [ print("Descriptografar") , decodificar()])
    bt_Iniciar.place(x=225 , y=215)
    
    bt_Sair = tk.Button(root, text="Fechar", width=16 , command=lambda: [ print("Botao Fechar") , fechar_app()])
    bt_Sair.place(x=474 , y=332)
    
    
    text_senha = tk.Text(root, height=4 , width=22)
    #text_senha.place(x=195 , y=250)
    
    root.mainloop()

if __name__ == "__main__":
    print(' ===================== MAIN()===================== ')
    interface()